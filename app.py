import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
from statsmodels.tsa.stattools import adfuller
from scipy import stats
import yfinance as yf
import plotly.express as px
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import io
import base64
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

# Yardƒ±mcƒ± fonksiyonlar
def calculate_technical_indicators(df):
    # Temel hesaplamalar
    df['Daily_Return'] = df['close'].pct_change() * 100
    df['Volatility'] = df['Daily_Return'].rolling(window=20).std()
    df['MA20'] = df['close'].rolling(window=20).mean()
    df['MA50'] = df['close'].rolling(window=50).mean()
    df['MA200'] = df['close'].rolling(window=200).mean()
    
    # RSI hesaplama
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    
    # MACD hesaplama
    exp1 = df['close'].ewm(span=12, adjust=False).mean()
    exp2 = df['close'].ewm(span=26, adjust=False).mean()
    df['MACD'] = exp1 - exp2
    df['Signal_Line'] = df['MACD'].ewm(span=9, adjust=False).mean()
    
    # Bollinger Bands
    df['BB_middle'] = df['close'].rolling(window=20).mean()
    df['BB_upper'] = df['BB_middle'] + 2*df['close'].rolling(window=20).std()
    df['BB_lower'] = df['BB_middle'] - 2*df['close'].rolling(window=20).std()
    
    return df

def calculate_risk_metrics(df):
    returns = df['Daily_Return'].dropna() / 100  # Y√ºzdeyi ondalƒ±ƒüa √ßevir
    
    # Volatilite (yƒ±llƒ±k)
    volatility = returns.std() * np.sqrt(252)
    
    # Value at Risk (VaR)
    var_95 = np.percentile(returns, 5)
    var_99 = np.percentile(returns, 1)
    
    # Sharpe Ratio (Risk-free rate olarak %5 varsayƒ±yoruz)
    risk_free_rate = 0.05
    excess_returns = returns - risk_free_rate/252  # G√ºnl√ºk risk-free rate
    sharpe_ratio = np.sqrt(252) * excess_returns.mean() / excess_returns.std()
    
    # Maximum Drawdown
    cum_returns = (1 + returns).cumprod()
    rolling_max = cum_returns.expanding().max()
    drawdowns = cum_returns/rolling_max - 1
    max_drawdown = drawdowns.min()
    
    # Beta (Piyasa verisi olmadƒ±ƒüƒ± i√ßin varsayƒ±lan 1)
    beta = 1.0
    
    return {
        'Volatilite': volatility,
        'VaR_95': var_95,
        'VaR_99': var_99,
        'Sharpe Oranƒ±': sharpe_ratio,
        'Max Drawdown': max_drawdown,
        'Beta': beta
    }

def perform_statistical_analysis(df):
    # Duraƒüanlƒ±k testi (ADF)
    adf_result = adfuller(df['close'].dropna())
    
    # Normallik testi
    returns = df['Daily_Return'].dropna()
    stat, p_value = stats.normaltest(returns)
    
    # Otokorelasyon
    autocorr = returns.autocorr()
    
    # √áarpƒ±klƒ±k ve Basƒ±klƒ±k
    skew = returns.skew()
    kurtosis = returns.kurtosis()
    
    # ARIMA modeli
    try:
        model = ARIMA(df['close'], order=(1,1,1))
        results = model.fit()
        forecast = results.forecast(steps=1)[0]
    except:
        forecast = None
    
    # Mevsimsellik analizi
    try:
        seasonal_result = seasonal_decompose(df['close'], period=30)
        seasonality = seasonal_result.seasonal[-1]
    except:
        seasonality = None
    
    return {
        'ADF p-deƒüeri': adf_result[1],
        'Normallik p-deƒüeri': p_value,
        'Otokorelasyon': autocorr,
        '√áarpƒ±klƒ±k': skew,
        'Basƒ±klƒ±k': kurtosis,
        'ARIMA Tahmini': forecast,
        'Mevsimsellik': seasonality
    }

def predict_next_day_values(df):
    # √ñzellik se√ßimi
    features = ['open', 'high', 'low', 'close', 'Volume', 'MA20', 'MA50', 'MA200', 'RSI', 'Daily_Return']
    X = df[features].values[:-1]  # Son g√ºn√º tahmin i√ßin kullanacaƒüƒ±z
    y_close = df['close'].values[1:]  # Bir sonraki g√ºn√ºn kapanƒ±≈üƒ±
    y_high = df['high'].values[1:]    # Bir sonraki g√ºn√ºn en y√ºkseƒüi
    y_low = df['low'].values[1:]      # Bir sonraki g√ºn√ºn en d√º≈ü√ºƒü√º
    
    # Veri setini b√∂lme
    X_train, X_test, y_train_close, y_test_close = train_test_split(X[:-1], y_close[:-1], test_size=0.2, random_state=42)
    _, _, y_train_high, y_test_high = train_test_split(X[:-1], y_high[:-1], test_size=0.2, random_state=42)
    _, _, y_train_low, y_test_low = train_test_split(X[:-1], y_low[:-1], test_size=0.2, random_state=42)
    
    # Model eƒüitimi - Kapanƒ±≈ü
    model_close = GradientBoostingRegressor(n_estimators=100, random_state=42)
    model_close.fit(X_train, y_train_close)
    
    # Model eƒüitimi - En Y√ºksek
    model_high = GradientBoostingRegressor(n_estimators=100, random_state=42)
    model_high.fit(X_train, y_train_high)
    
    # Model eƒüitimi - En D√º≈ü√ºk
    model_low = GradientBoostingRegressor(n_estimators=100, random_state=42)
    model_low.fit(X_train, y_train_low)
    
    # Son g√ºn√ºn verilerini kullanarak tahmin
    last_day = X[-1].reshape(1, -1)
    
    predictions = {
        'close': model_close.predict(last_day)[0],
        'high': model_high.predict(last_day)[0],
        'low': model_low.predict(last_day)[0],
        'open': df['close'].iloc[-1]  # Bir sonraki g√ºn√ºn a√ßƒ±lƒ±≈üƒ± son kapanƒ±≈ü olarak tahmin edilir
    }
    
    return predictions

def generate_alternative_scenarios(df, predictions):
    # Temel tahminler
    base_predictions = predictions.copy()
    
    # Y√ºksek hacim senaryosu (normal hacmin 1.5 katƒ±)
    high_volume_scenario = {
        'open': base_predictions['open'] * 1.01,  # %1 daha y√ºksek
        'high': base_predictions['high'] * 1.02,  # %2 daha y√ºksek
        'low': base_predictions['low'] * 0.995,   # %0.5 daha d√º≈ü√ºk
        'close': base_predictions['close'] * 1.015 # %1.5 daha y√ºksek
    }
    
    # D√º≈ü√ºk hacim senaryosu (normal hacmin yarƒ±sƒ±)
    low_volume_scenario = {
        'open': base_predictions['open'] * 0.995,  # %0.5 daha d√º≈ü√ºk
        'high': base_predictions['high'] * 0.99,   # %1 daha d√º≈ü√ºk
        'low': base_predictions['low'] * 0.98,     # %2 daha d√º≈ü√ºk
        'close': base_predictions['close'] * 0.99   # %1 daha d√º≈ü√ºk
    }
    
    # Hacim durumu analizi
    avg_volume = df['Volume'].mean()
    current_volume = df['Volume'].iloc[-1]
    volume_change = ((current_volume - avg_volume) / avg_volume) * 100
    
    volume_status = "D√º≈ü√ºk Hacim" if volume_change < -25 else "Y√ºksek Hacim" if volume_change > 25 else "Normal Hacim"
    
    scenarios = {
        'Temel': base_predictions,
        'Y√ºksek_Hacim': high_volume_scenario,
        'D√º≈ü√ºk_Hacim': low_volume_scenario,
        'Hacim_Durumu': {
            'Durum': volume_status,
            'Deƒüi≈üim': volume_change
        }
    }
    
    return scenarios

def analyze_volume_scenarios(df, predictions):
    avg_volume = df['Volume'].mean()
    current_volume = df['Volume'].iloc[-1]
    volume_change = ((current_volume - avg_volume) / avg_volume) * 100
    
    # Hacim bazlƒ± senaryolar
    scenarios = {
        'Y√ºksek Hacim': {
            'open': predictions['close'] * 1.01,  # %1 daha y√ºksek
            'high': predictions['high'] * 1.02,   # %2 daha y√ºksek
            'low': predictions['low'] * 0.995,    # %0.5 daha d√º≈ü√ºk
            'close': predictions['close'] * 1.015 # %1.5 daha y√ºksek
        },
        'D√º≈ü√ºk Hacim': {
            'open': predictions['close'] * 0.995,  # %0.5 daha d√º≈ü√ºk
            'high': predictions['high'] * 0.99,    # %1 daha d√º≈ü√ºk
            'low': predictions['low'] * 0.98,      # %2 daha d√º≈ü√ºk
            'close': predictions['close'] * 0.99    # %1 daha d√º≈ü√ºk
        }
    }
    
    volume_status = "D√º≈ü√ºk Hacim" if volume_change < -25 else "Y√ºksek Hacim" if volume_change > 25 else "Normal Hacim"
    volume_percentage = abs(volume_change)
    
    return scenarios, volume_status, volume_percentage

def generate_analysis_summary(df, predictions, risk_metrics, stats_results):
    """Analiz √∂zetini ve yorumlarƒ± olu≈üturur."""
    
    # Genel trend analizi
    current_trend = "Y√úKSELƒ∞≈û" if df['close'].iloc[-1] > df['MA20'].iloc[-1] > df['MA50'].iloc[-1] else \
                   "Y√úKSELƒ∞≈û" if df['close'].iloc[-1] > df['MA20'].iloc[-1] else \
                   "D√ú≈û√ú≈û" if df['close'].iloc[-1] < df['MA20'].iloc[-1] < df['MA50'].iloc[-1] else \
                   "D√ú≈û√ú≈û" if df['close'].iloc[-1] < df['MA20'].iloc[-1] else "YATAY"
    
    # RSI durumu
    rsi_status = "A≈ûIRI ALIM üî¥" if df['RSI'].iloc[-1] > 70 else \
                 "A≈ûIRI SATIM üü¢" if df['RSI'].iloc[-1] < 30 else \
                 "N√ñTR ‚ö™"
    
    # Volatilite durumu
    volatility_status = "Y√úKSEK ‚ö†Ô∏è" if risk_metrics['Volatilite'] > 0.3 else \
                       "NORMAL ‚úÖ" if risk_metrics['Volatilite'] > 0.15 else \
                       "D√ú≈û√úK üí§"
    
    # Duraƒüanlƒ±k durumu
    stationarity = "DURAƒûAN ‚úÖ" if stats_results['ADF p-deƒüeri'] < 0.05 else "DURAƒûAN DEƒûƒ∞L ‚ö†Ô∏è"
    
    # Hareketli ortalamalar
    ma_status = {
        "MA20": f"{'‚¨ÜÔ∏è' if df['close'].iloc[-1] > df['MA20'].iloc[-1] else '‚¨áÔ∏è'} {df['MA20'].iloc[-1]:.2f}",
        "MA50": f"{'‚¨ÜÔ∏è' if df['close'].iloc[-1] > df['MA50'].iloc[-1] else '‚¨áÔ∏è'} {df['MA50'].iloc[-1]:.2f}",
        "MA200": f"{'‚¨ÜÔ∏è' if df['close'].iloc[-1] > df['MA200'].iloc[-1] else '‚¨áÔ∏è'} {df['MA200'].iloc[-1]:.2f}"
    }
    
    # MACD durumu
    macd_signal = "AL üü¢" if df['MACD'].iloc[-1] > df['Signal_Line'].iloc[-1] else "SAT üî¥"
    
    # Bollinger durumu
    if df['close'].iloc[-1] > df['BB_upper'].iloc[-1]:
        bb_status = "A≈ûIRI ALINIM ‚ö†Ô∏è"
    elif df['close'].iloc[-1] < df['BB_lower'].iloc[-1]:
        bb_status = "A≈ûIRI SATIM üîî"
    else:
        bb_status = "NORMAL ‚úÖ"
    
    # Hacim analizi
    volume_avg = df['Volume'].mean()
    current_volume = df['Volume'].iloc[-1]
    volume_status = "Y√úKSEK üí™" if current_volume > volume_avg * 1.5 else \
                   "D√ú≈û√úK üëé" if current_volume < volume_avg * 0.5 else \
                   "NORMAL üëç"
    
    # Risk durumu
    risk_status = "Y√úKSEK Rƒ∞SK ‚ö†Ô∏è" if risk_metrics['Volatilite'] > 0.3 or risk_metrics['VaR_95'] < -0.03 else \
                 "ORTA Rƒ∞SK ‚ö°" if risk_metrics['Volatilite'] > 0.2 or risk_metrics['VaR_95'] < -0.02 else \
                 "D√ú≈û√úK Rƒ∞SK ‚úÖ"
    
    return {
        'Genel Trend': f"{current_trend} {'üìà' if current_trend == 'Y√úKSELƒ∞≈û' else 'üìâ' if current_trend == 'D√ú≈û√ú≈û' else '‚ÜîÔ∏è'}",
        'RSI Durumu': f"{rsi_status} ({df['RSI'].iloc[-1]:.1f})",
        'Volatilite': f"{volatility_status} ({risk_metrics['Volatilite']*100:.1f}%)",
        'Duraƒüanlƒ±k': stationarity,
        'MACD Sinyali': macd_signal,
        'Bollinger': bb_status,
        'Hacim Durumu': volume_status,
        'Risk Durumu': risk_status,
        'Teknik G√∂stergeler': ma_status,
        'Tahmin': f"{'Y√úKSELƒ∞≈û üìà' if predictions['close'] > df['close'].iloc[-1] else 'D√ú≈û√ú≈û üìâ'} (‚Ç∫{predictions['close']:.2f})",
        'Sharpe': f"{'M√úKEMMEL üåü' if risk_metrics['Sharpe Oranƒ±'] > 2 else 'ƒ∞Yƒ∞ ‚úÖ' if risk_metrics['Sharpe Oranƒ±'] > 1 else 'ZAYIF ‚ö†Ô∏è'}"
    }

def analyze_statistical_patterns(df):
    # Zamansallƒ±k analizi
    seasonal = seasonal_decompose(df['close'], period=30, model='additive')
    has_seasonality = seasonal.seasonal.std() > df['close'].std() * 0.1
    
    # Otokorelasyon analizi
    acf_values = acf(df['close'], nlags=30)
    has_autocorrelation = any(abs(acf_values[1:]) > 0.2)  # ƒ∞lk lag'i atlƒ±yoruz
    
    # Trend analizi
    z_score = (df['close'] - df['close'].rolling(window=20).mean()) / df['close'].rolling(window=20).std()
    trend_strength = abs(z_score.mean())
    
    patterns = {
        'Mevsimsellik': has_seasonality,
        'Otokorelasyon': has_autocorrelation,
        'Trend G√ºc√º': trend_strength,
        'D√∂ng√ºsel Hareket': seasonal.seasonal.std() / df['close'].std()
    }
    
    return patterns

def analyze_correlation_matrix(corr_matrix):
    correlations = []
    
    # √ñnemli korelasyonlarƒ± analiz et
    pairs = [
        ('close', 'Volume'),
        ('close', 'RSI'),
        ('Volume', 'Daily_Return'),
        ('RSI', 'Daily_Return')
    ]
    
    for var1, var2 in pairs:
        corr = corr_matrix.loc[var1, var2]
        strength = (
            "g√º√ßl√º pozitif" if corr > 0.7
            else "orta pozitif" if corr > 0.3
            else "g√º√ßl√º negatif" if corr < -0.7
            else "orta negatif" if corr < -0.3
            else "zayƒ±f"
        )
        correlations.append({
            'pair': f"{var1}-{var2}",
            'correlation': corr,
            'strength': strength,
            'interpretation': interpret_correlation(var1, var2, corr)
        })
    
    return correlations

def interpret_correlation(var1, var2, corr):
    if var1 == 'close' and var2 == 'Volume':
        if corr > 0.3:
            return "Y√ºksek hacim fiyat artƒ±≈üƒ±nƒ± destekliyor"
        elif corr < -0.3:
            return "Y√ºksek hacim fiyat d√º≈ü√º≈ü√ºn√º destekliyor"
        else:
            return "Hacim ve fiyat arasƒ±nda belirgin bir ili≈üki yok"
    
    elif (var1 == 'close' and var2 == 'RSI') or (var1 == 'RSI' and var2 == 'close'):
        if corr > 0.7:
            return "G√º√ßl√º trend mevcut"
        else:
            return "Trend zayƒ±f veya yatay hareket mevcut"
    
    elif var1 == 'Volume' and var2 == 'Daily_Return':
        if abs(corr) > 0.3:
            return "Hacim, g√ºnl√ºk getirilerle ili≈ükili"
        else:
            return "Hacim, g√ºnl√ºk getirilerle ili≈ükili deƒüil"
    
    return "Standart korelasyon ili≈ükisi"

def create_candlestick_chart(df):
    # Mum grafiƒüi
    candlestick = go.Candlestick(
        x=df.index,
        open=df['open'],
        high=df['high'],
        low=df['low'],
        close=df['close'],
        name='Fiyat'
    )
    
    # Hareketli ortalamalar
    ma20 = go.Scatter(x=df.index, y=df['MA20'], name='MA20', line=dict(color='blue', width=1))
    ma50 = go.Scatter(x=df.index, y=df['MA50'], name='MA50', line=dict(color='orange', width=1))
    ma200 = go.Scatter(x=df.index, y=df['MA200'], name='MA200', line=dict(color='red', width=1))
    
    # Grafik d√ºzeni
    layout = go.Layout(
        title='Hisse Senedi Fiyat Grafiƒüi',
        yaxis=dict(title='Fiyat'),
        xaxis=dict(title='Tarih'),
        height=600
    )
    
    # Grafik olu≈üturma
    fig = go.Figure(data=[candlestick, ma20, ma50, ma200], layout=layout)
    
    return fig

def create_volume_chart(df):
    volume_chart = go.Bar(
        x=df.index,
        y=df['Volume'],
        name='Hacim'
    )
    
    layout = go.Layout(
        title='Hacim Grafiƒüi',
        yaxis=dict(title='Hacim'),
        xaxis=dict(title='Tarih'),
        height=300
    )
    
    fig = go.Figure(data=[volume_chart], layout=layout)
    return fig

def create_technical_charts(df):
    # RSI grafiƒüi
    rsi = go.Scatter(x=df.index, y=df['RSI'], name='RSI')
    rsi_70 = go.Scatter(x=df.index, y=[70]*len(df), name='A≈üƒ±rƒ± Alƒ±m',
                       line=dict(color='red', dash='dash'))
    rsi_30 = go.Scatter(x=df.index, y=[30]*len(df), name='A≈üƒ±rƒ± Satƒ±m',
                       line=dict(color='green', dash='dash'))
    
    rsi_layout = go.Layout(
        title='RSI G√∂stergesi',
        yaxis=dict(title='RSI'),
        xaxis=dict(title='Tarih'),
        height=300
    )
    
    rsi_fig = go.Figure(data=[rsi, rsi_70, rsi_30], layout=rsi_layout)
    
    # MACD grafiƒüi
    macd = go.Scatter(x=df.index, y=df['MACD'], name='MACD')
    signal = go.Scatter(x=df.index, y=df['Signal_Line'], name='Sinyal')
    
    macd_layout = go.Layout(
        title='MACD G√∂stergesi',
        yaxis=dict(title='MACD'),
        xaxis=dict(title='Tarih'),
        height=300
    )
    
    macd_fig = go.Figure(data=[macd, signal], layout=macd_layout)
    
    return rsi_fig, macd_fig

# Streamlit sayfa yapƒ±landƒ±rmasƒ±
st.set_page_config(
    page_title="Hisse Senedi Analizi",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Sayfa stili
st.markdown("""
<style>
    .main {
        padding: 0rem 1rem;
    }
    .stAlert {
        padding: 1rem;
        margin: 1rem 0;
    }
    .css-1d391kg {
        padding: 1rem;
    }
    .stMetric {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# Ana ba≈ülƒ±k
st.title("Detaylƒ± Hisse Senedi Analizi Raporu")

# Kullanƒ±cƒ±dan hisse adƒ±nƒ± al
hisse_adi = st.text_input("Analiz edilecek hisse adƒ±nƒ± girin (√∂rn: SISE):", "").upper()

# Dosya y√ºkleme alanƒ±
uploaded_file = st.file_uploader("CSV dosyasƒ±nƒ± y√ºkleyin", type=['csv'])

if uploaded_file is not None:
    # Dosya adƒ±nƒ± kontrol et
    if not uploaded_file.name.startswith(hisse_adi):
        st.error(f"L√ºtfen {hisse_adi} ile ba≈ülayan bir CSV dosyasƒ± y√ºkleyin!")
    else:
        # CSV dosyasƒ±nƒ± oku
        df = pd.read_csv(uploaded_file)
        
        # Tarih s√ºtununu d√ºzenle
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.set_index('time', inplace=True)
        
        # Teknik g√∂stergeleri hesapla
        df = calculate_technical_indicators(df)

        # 1. √ñZET Bƒ∞LGƒ∞LER
        st.header("1. √ñZET Bƒ∞LGƒ∞LER")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Son Kapanƒ±≈ü", f"‚Ç∫{df['close'].iloc[-1]:.2f}")
        with col2:
            daily_return = ((df['close'].iloc[-1] / df['close'].iloc[-2]) - 1) * 100
            st.metric("G√ºnl√ºk Deƒüi≈üim", f"%{daily_return:.2f}")
        with col3:
            volume_change = ((df['Volume'].iloc[-1] / df['Volume'].iloc[-2]) - 1) * 100
            st.metric("Hacim Deƒüi≈üimi", f"%{volume_change:.2f}")
        with col4:
            st.metric("G√ºnl√ºk ƒ∞≈ülem Hacmi", f"‚Ç∫{df['Volume'].iloc[-1]:,.0f}")

        # 2. TEKNƒ∞K ANALƒ∞Z GRAFƒ∞KLERƒ∞
        st.header("2. TEKNƒ∞K ANALƒ∞Z GRAFƒ∞KLERƒ∞")
        
        # 2.1 Mum Grafiƒüi ve Hacim Analizi
        st.subheader("2.1 Mum Grafiƒüi ve Hacim Analizi")
        
        # Mum grafiƒüi
        fig_candlestick = create_candlestick_chart(df)
        st.plotly_chart(fig_candlestick)
        
        # Teknik analiz yorumlarƒ±
        current_price = df['close'].iloc[-1]
        ma20_last = df['MA20'].iloc[-1]
        ma50_last = df['MA50'].iloc[-1]
        ma200_last = df['MA200'].iloc[-1]
        
        trend_analysis = f"""
        **Trend Analizi:**
        - **Kƒ±sa Vadeli (MA20):** {"Y√ºkseli≈ü" if current_price > ma20_last else "D√º≈ü√º≈ü"} 
          - Fiyat: ‚Ç∫{current_price:.2f}, MA20: ‚Ç∫{ma20_last:.2f}
          - {"%{:.1f} {} MA20'den" .format(abs((current_price/ma20_last-1)*100), "yukarƒ±da" if current_price > ma20_last else "a≈üaƒüƒ±da")}
        
        - **Orta Vadeli (MA50):** {"Y√ºkseli≈ü" if current_price > ma50_last else "D√º≈ü√º≈ü"}
          - MA50: ‚Ç∫{ma50_last:.2f}
          - {"%{:.1f} {} MA50'den" .format(abs((current_price/ma50_last-1)*100), "yukarƒ±da" if current_price > ma50_last else "a≈üaƒüƒ±da")}
        
        - **Uzun Vadeli (MA200):** {"Y√ºkseli≈ü" if current_price > ma200_last else "D√º≈ü√º≈ü"}
          - MA200: ‚Ç∫{ma200_last:.2f}
          - {"%{:.1f} {} MA200'den" .format(abs((current_price/ma200_last-1)*100), "yukarƒ±da" if current_price > ma200_last else "a≈üaƒüƒ±da")}
        
        **Trend G√ºc√º:** {trend_gucu}
        """.format(
            trend_gucu="G√ú√áL√ú üí™" if all([current_price > ma20_last > ma50_last > ma200_last]) else 
                      "ORTA üëç" if current_price > ma20_last and current_price > ma50_last else 
                      "ZAYIF üëé" if current_price < ma20_last and current_price < ma50_last else 
                      "BELƒ∞RSƒ∞Z ‚ö†Ô∏è"
        )

        st.markdown(trend_analysis)
        
        # Hacim grafiƒüi ve analizi
        fig_volume = create_volume_chart(df)
        st.plotly_chart(fig_volume)
        
        # Hacim analizi
        avg_volume = df['Volume'].mean()
        current_volume = df['Volume'].iloc[-1]
        volume_change = ((current_volume - avg_volume) / avg_volume) * 100
        
        volume_analysis = f"""
        **Hacim Analizi:**
        - **G√ºnl√ºk Hacim:** {current_volume:,.0f}
        - **Ortalama Hacim:** {avg_volume:,.0f}
        - **Hacim Deƒüi≈üimi:** %{volume_change:.1f} ({current_volume/avg_volume:.1f}x)
        
        **Hacim Durumu:** {
            "üî• √áOK Y√úKSEK - G√º√ßl√º alƒ±cƒ±/satƒ±cƒ± ilgisi" if volume_change > 100 else
            "üìà Y√úKSEK - Artan ilgi" if volume_change > 50 else
            "‚û°Ô∏è NORMAL - Ortalama ilgi" if volume_change > -25 else
            "üìâ D√ú≈û√úK - Azalan ilgi" if volume_change > -50 else
            "‚ö†Ô∏è √áOK D√ú≈û√úK - ƒ∞lgi kaybƒ±"
        }
        
        **Yorum:** {
            "√áok y√ºksek hacim, fiyat hareketinin g√ºvenilirliƒüini artƒ±rƒ±yor." if volume_change > 100 else
            "Ortalamanƒ±n √ºzerinde hacim, trend y√∂n√ºn√º destekliyor." if volume_change > 50 else
            "Normal hacim seviyeleri, standart piyasa aktivitesi." if volume_change > -25 else
            "D√º≈ü√ºk hacim, trend g√ºc√ºn√ºn zayƒ±f olduƒüunu g√∂steriyor." if volume_change > -50 else
            "√áok d√º≈ü√ºk hacim, piyasa ilgisinin azaldƒ±ƒüƒ±nƒ± g√∂steriyor."
        }
        """
        
        st.markdown(volume_analysis)
        
        # 2.2 Teknik G√∂stergeler ve Yorumlarƒ±
        st.subheader("2.2 Teknik G√∂stergeler")
        
        # RSI ve MACD grafikleri
        rsi_fig, macd_fig = create_technical_charts(df)
        
        col1, col2 = st.columns(2)
        with col1:
            st.plotly_chart(rsi_fig)
            
            # RSI yorumu
            current_rsi = df['RSI'].iloc[-1]
            rsi_analysis = f"""
            **RSI Analizi (14 g√ºnl√ºk):**
            - **Mevcut RSI:** {current_rsi:.1f}
            - **Durum:** {
                "üíπ A≈ûIRI ALIM - Satƒ±≈ü fƒ±rsatƒ±" if current_rsi > 70 else
                "üìâ A≈ûIRI SATIM - Alƒ±m fƒ±rsatƒ±" if current_rsi < 30 else
                "‚û°Ô∏è N√ñTR - Normal seviyeler"
            }
            
            **Yorum:** {
                "A≈üƒ±rƒ± alƒ±m b√∂lgesinde, d√ºzeltme gelebilir." if current_rsi > 70 else
                "A≈üƒ±rƒ± satƒ±m b√∂lgesinde, tepki y√ºkseli≈üi gelebilir." if current_rsi < 30 else
                "RSI n√∂tr b√∂lgede, trend y√∂n√ºnde hareket devam edebilir."
            }
            """
            st.markdown(rsi_analysis)
            
        with col2:
            st.plotly_chart(macd_fig)
            
            # MACD yorumu
            current_macd = df['MACD'].iloc[-1]
            current_signal = df['Signal_Line'].iloc[-1]
            macd_cross = "AL" if current_macd > current_signal else "SAT"
            
            macd_analysis = f"""
            **MACD Analizi:**
            - **MACD:** {current_macd:.3f}
            - **Sinyal:** {current_signal:.3f}
            - **Sinyal:** {
                "üü¢ AL - MACD, sinyal √ßizgisinin √ºzerinde" if macd_cross == "AL" else
                "üî¥ SAT - MACD, sinyal √ßizgisinin altƒ±nda"
            }
            
            **Yorum:** {
                "Y√ºkseli≈ü momentumu devam ediyor." if macd_cross == "AL" and current_macd > 0 else
                "Zayƒ±f bir y√ºkseli≈ü sinyali var." if macd_cross == "AL" and current_macd < 0 else
                "D√º≈ü√º≈ü momentumu devam ediyor." if macd_cross == "SAT" and current_macd < 0 else
                "Zayƒ±f bir d√º≈ü√º≈ü sinyali var."
            }
            """
            st.markdown(macd_analysis)

        # 3. ƒ∞STATƒ∞STƒ∞KSEL ANALƒ∞Z
        st.header("3. ƒ∞STATƒ∞STƒ∞KSEL ANALƒ∞Z")
        
        # 3.1 Temel ƒ∞statistikler
        st.subheader("3.1 Temel ƒ∞statistikler")
        
        # Temel istatistikler
        basic_stats = df[['close', 'Volume', 'Daily_Return']].describe()
        st.dataframe(basic_stats)
        
        # ƒ∞statistik yorumlarƒ±
        mean_price = df['close'].mean()
        std_price = df['close'].std()
        price_cv = std_price / mean_price  # Deƒüi≈üim katsayƒ±sƒ±
        
        stats_analysis = f"""
        **Fiyat ƒ∞statistikleri:**
        - **Ortalama Fiyat:** ‚Ç∫{mean_price:.2f}
        - **Standart Sapma:** ‚Ç∫{std_price:.2f}
        - **Deƒüi≈üim Katsayƒ±sƒ±:** {price_cv:.2f}
        - **Volatilite Seviyesi:** {
            "üî• √áOK Y√úKSEK" if price_cv > 0.5 else
            "üìà Y√úKSEK" if price_cv > 0.3 else
            "‚û°Ô∏è NORMAL" if price_cv > 0.1 else
            "üìâ D√ú≈û√úK"
        }
        
        **Getiri ƒ∞statistikleri:**
        - **Ortalama Getiri:** %{df['Daily_Return'].mean():.2f}
        - **Maksimum Y√ºkseli≈ü:** %{df['Daily_Return'].max():.2f}
        - **Maksimum D√º≈ü√º≈ü:** %{df['Daily_Return'].min():.2f}
        - **Pozitif Getiri G√ºnleri:** %{(df['Daily_Return'] > 0).mean()*100:.1f}
        
        **Hacim ƒ∞statistikleri:**
        - **Ortalama Hacim:** {df['Volume'].mean():,.0f}
        - **Maksimum Hacim:** {df['Volume'].max():,.0f}
        - **Minimum Hacim:** {df['Volume'].min():,.0f}
        """
        
        st.markdown(stats_analysis)
        
        # 3.2 Risk Metrikleri
        st.subheader("3.2 Risk Analizi")
        risk_metrics = calculate_risk_metrics(df)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Yƒ±llƒ±k Volatilite", f"%{risk_metrics['Volatilite']*100:.2f}")
        with col2:
            st.metric("Sharpe Oranƒ±", f"{risk_metrics['Sharpe Oranƒ±']:.2f}")
        with col3:
            st.metric("Maximum Drawdown", f"%{risk_metrics['Max Drawdown']*100:.2f}")
        
        risk_analysis = f"""
        **Risk Analizi Sonu√ßlarƒ±:**
        
        1. **Volatilite Analizi:**
           - Yƒ±llƒ±k Volatilite: %{risk_metrics['Volatilite']*100:.2f}
           - Durum: {
               "üî• √áOK Rƒ∞SKLƒ∞ - Y√ºksek oynaklƒ±k" if risk_metrics['Volatilite'] > 0.4 else
               "‚ö†Ô∏è Rƒ∞SKLƒ∞ - Artan oynaklƒ±k" if risk_metrics['Volatilite'] > 0.25 else
               "‚ÑπÔ∏è NORMAL - Standart oynaklƒ±k" if risk_metrics['Volatilite'] > 0.15 else
               "‚úÖ D√ú≈û√úK Rƒ∞SK - D√º≈ü√ºk oynaklƒ±k"
           }
        
        2. **Sharpe Oranƒ± Analizi:**
           - Sharpe Oranƒ±: {risk_metrics['Sharpe Oranƒ±']:.2f}
           - Yorum: {
               "üåü M√úKEMMEL - Risk/getiri oranƒ± √ßok iyi" if risk_metrics['Sharpe Oranƒ±'] > 2 else
               "‚úÖ ƒ∞Yƒ∞ - Pozitif risk/getiri oranƒ±" if risk_metrics['Sharpe Oranƒ±'] > 1 else
               "‚ÑπÔ∏è NORMAL - Kabul edilebilir risk/getiri" if risk_metrics['Sharpe Oranƒ±'] > 0 else
               "‚ö†Ô∏è ZAYIF - Negatif risk/getiri oranƒ±"
           }
        
        3. **Value at Risk (VaR) Analizi:**
           - VaR (95%): %{risk_metrics['VaR_95']*100:.2f}
           - VaR (99%): %{risk_metrics['VaR_99']*100:.2f}
           - Yorum: Bir g√ºnde %95 olasƒ±lƒ±kla maksimum %{abs(risk_metrics['VaR_95']*100):.1f} kayƒ±p beklentisi
        
        4. **Maximum Drawdown Analizi:**
           - Maximum Drawdown: %{risk_metrics['Max Drawdown']*100:.2f}
           - Durum: {
               "‚ö†Ô∏è Y√úKSEK KAYIP Rƒ∞SKƒ∞" if risk_metrics['Max Drawdown'] < -0.3 else
               "‚ö° Dƒ∞KKAT" if risk_metrics['Max Drawdown'] < -0.2 else
               "‚ÑπÔ∏è NORMAL" if risk_metrics['Max Drawdown'] < -0.1 else
               "‚úÖ D√ú≈û√úK KAYIP"
           }
        
        **Risk Y√∂netimi √ñnerileri:**
        1. Stop-Loss: %{abs(risk_metrics['VaR_95']*100):.1f} altƒ±nda belirlenmeli
        2. Position Sizing: {
            "K√º√ß√ºk pozisyonlar √∂nerilir" if risk_metrics['Volatilite'] > 0.3 else
            "Orta b√ºy√ºkl√ºkte pozisyonlar alƒ±nabilir" if risk_metrics['Volatilite'] > 0.2 else
            "Normal pozisyon b√ºy√ºkl√ºƒü√º uygun"
        }
        3. Takip: {
            "√áok yakƒ±n takip gerekli" if risk_metrics['Volatilite'] > 0.3 else
            "G√ºnl√ºk takip √∂nerilir" if risk_metrics['Volatilite'] > 0.2 else
            "Standart takip yeterli"
        }
        """
        
        st.markdown(risk_analysis)
        
        # 3.3 ƒ∞statistiksel Testler
        st.subheader("3.3 ƒ∞statistiksel Testler")
        stats_results = perform_statistical_analysis(df)
        
        # Test sonu√ßlarƒ±
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Duraƒüanlƒ±k Testi (ADF)", 
                     f"p-deƒüeri: {stats_results['ADF p-deƒüeri']:.4f}")
            st.metric("Normallik Testi", 
                     f"p-deƒüeri: {stats_results['Normallik p-deƒüeri']:.4f}")
        
        with col2:
            st.metric("Otokorelasyon", 
                     f"{stats_results['Otokorelasyon']:.4f}")
            if stats_results['ARIMA Tahmini'] is not None:
                st.metric("ARIMA Tahmini", 
                         f"‚Ç∫{stats_results['ARIMA Tahmini']:.2f}")
        
        # Test yorumlarƒ±
        test_analysis = """
        **ƒ∞statistiksel Test Sonu√ßlarƒ±:**
        
        1. **Duraƒüanlƒ±k Analizi (ADF Testi):**
           - p-deƒüeri: {:.4f}
           - Sonu√ß: {}
           - Yorum: {}
        
        2. **Normallik Testi:**
           - p-deƒüeri: {:.4f}
           - Sonu√ß: {}
           - Yorum: {}
        
        3. **Otokorelasyon Analizi:**
           - Katsayƒ±: {:.4f}
           - Sonu√ß: {}
           - Yorum: {}
        
        4. **Mevsimsellik Analizi:**
           - Sonu√ß: {}
           - Yorum: {}
        """.format(
            stats_results['ADF p-deƒüeri'],
            "‚ùå DURAƒûAN DEƒûƒ∞L" if stats_results['ADF p-deƒüeri'] > 0.05 else "‚úÖ DURAƒûAN",
            "Fiyat serisi trend i√ßeriyor, teknik analiz i√ßin fark alƒ±nmalƒ±" if stats_results['ADF p-deƒüeri'] > 0.05 else "Fiyat serisi duraƒüan, doƒürudan analiz edilebilir",
            
            stats_results['Normallik p-deƒüeri'],
            "‚ùå NORMAL DAƒûILIM DEƒûƒ∞L" if stats_results['Normallik p-deƒüeri'] < 0.05 else "‚úÖ NORMAL DAƒûILIM",
            "Ekstrem hareketler normalden fazla, risk y√∂netimi √∂nemli" if stats_results['Normallik p-deƒüeri'] < 0.05 else "Fiyat hareketleri normal daƒüƒ±lƒ±ma uyuyor",
            
            stats_results['Otokorelasyon'],
            "G√ú√áL√ú ƒ∞Lƒ∞≈ûKƒ∞" if abs(stats_results['Otokorelasyon']) > 0.7 else "ORTA ƒ∞Lƒ∞≈ûKƒ∞" if abs(stats_results['Otokorelasyon']) > 0.3 else "ZAYIF ƒ∞Lƒ∞≈ûKƒ∞",
            "Ge√ßmi≈ü fiyatlar gelecek tahmini i√ßin kullanƒ±labilir" if abs(stats_results['Otokorelasyon']) > 0.5 else "Ge√ßmi≈ü fiyatlar zayƒ±f g√∂sterge",
            
            "MEVSƒ∞MSELLƒ∞K VAR" if stats_results['Mevsimsellik'] is not None and abs(stats_results['Mevsimsellik']) > 0.1 else "MEVSƒ∞MSELLƒ∞K YOK",
            "Belirli d√∂nemlerde tekrarlayan hareketler mevcut" if stats_results['Mevsimsellik'] is not None and abs(stats_results['Mevsimsellik']) > 0.1 else "Belirgin d√∂nemsel hareket yok"
        )
        
        st.markdown(test_analysis)

        # 4. Fƒ∞BONACCƒ∞ SEVƒ∞YELERƒ∞
        st.header("4. Fƒ∞BONACCƒ∞ SEVƒ∞YELERƒ∞")
        fib_levels = calculate_fibonacci_levels(df['high'].max(), df['low'].min())
        
        col1, col2 = st.columns(2)
        with col1:
            for level, value in fib_levels.items():
                st.write(f"{level}: ‚Ç∫{value:.2f}")
                
        with col2:
            fig_fib = plt.figure(figsize=(10, 6))
            plt.plot(df.index, df['close'])
            for value in fib_levels.values():
                plt.axhline(y=value, color='r', linestyle='--', alpha=0.3)
            plt.title('Fibonacci Seviyeleri')
            plt.grid(True)
            st.pyplot(fig_fib)

        # 5. GELECEK TAHMƒ∞NLERƒ∞ VE SENARYOLAR
        st.header("5. GELECEK TAHMƒ∞NLERƒ∞ VE SENARYOLAR")
        
        # 5.1 Temel Tahminler
        st.subheader("5.1 Temel Tahminler")
        predictions = predict_next_day_values(df)
        scenarios = generate_alternative_scenarios(df, predictions)
        
        # Tahmin √∂zet tablosu
        pred_df = pd.DataFrame({
            'Metrik': ['A√ßƒ±lƒ±≈ü', 'En Y√ºksek', 'En D√º≈ü√ºk', 'Kapanƒ±≈ü'],
            'Tahmin': [
                f"‚Ç∫{predictions['open']:.2f}",
                f"‚Ç∫{predictions['high']:.2f}",
                f"‚Ç∫{predictions['low']:.2f}",
                f"‚Ç∫{predictions['close']:.2f}"
            ],
            'Deƒüi≈üim (%)': [
                f"%{((predictions['open']/df['close'].iloc[-1])-1)*100:.1f}",
                f"%{((predictions['high']/df['close'].iloc[-1])-1)*100:.1f}",
                f"%{((predictions['low']/df['close'].iloc[-1])-1)*100:.1f}",
                f"%{((predictions['close']/df['close'].iloc[-1])-1)*100:.1f}"
            ]
        })
        
        st.table(pred_df)
        
        # Tahmin yorumlarƒ±
        pred_change = ((predictions['close'] / df['close'].iloc[-1]) - 1) * 100
        pred_range = ((predictions['high'] - predictions['low']) / predictions['low']) * 100
        
        prediction_analysis = f"""
        **Tahmin Analizi:**
        
        1. **Genel G√∂r√ºn√ºm:**
           - Beklenen Y√∂n: {"üü¢ Y√úKSELƒ∞≈û" if pred_change > 1 else "üî¥ D√ú≈û√ú≈û" if pred_change < -1 else "‚ö™ YATAY"}
           - Beklenen Deƒüi≈üim: %{pred_change:.1f}
           - Fiyat Aralƒ±ƒüƒ±: ‚Ç∫{predictions['low']:.2f} - ‚Ç∫{predictions['high']:.2f} (%{pred_range:.1f})
        
        2. **G√ºven Analizi:**
           - Trend G√ºc√º: {
               "üí™ G√ú√áL√ú" if abs(pred_change) > 3 else
               "üëç ORTA" if abs(pred_change) > 1 else
               "üëé ZAYIF"
           }
           - Tahmin G√ºvenilirliƒüi: {
               "‚≠ê‚≠ê‚≠ê Y√úKSEK" if scenarios['Hacim_Durumu']['Durum'] == "Y√ºksek Hacim" and abs(pred_change) > 2 else
               "‚≠ê‚≠ê ORTA" if scenarios['Hacim_Durumu']['Durum'] == "Normal Hacim" or abs(pred_change) > 1 else
               "‚≠ê D√ú≈û√úK"
           }
        
        3. **Destek/Diren√ß Seviyeleri:**
           - G√º√ßl√º Diren√ß: ‚Ç∫{predictions['high']:.2f}
           - Zayƒ±f Diren√ß: ‚Ç∫{(predictions['high'] + predictions['close'])/2:.2f}
           - Zayƒ±f Destek: ‚Ç∫{(predictions['low'] + predictions['close'])/2:.2f}
           - G√º√ßl√º Destek: ‚Ç∫{predictions['low']:.2f}
        """
        
        st.markdown(prediction_analysis)
        
        # 5.2 Alternatif Senaryolar
        st.subheader("5.2 Hacim Bazlƒ± Senaryolar")
        
        # Hacim durumu analizi
        volume_status = scenarios['Hacim_Durumu']['Durum']
        volume_change = scenarios['Hacim_Durumu']['Deƒüi≈üim']
        
        st.info(f"Mevcut Hacim Durumu: {volume_status} (Ortalamadan %{volume_change:.1f} {'fazla' if volume_change > 0 else 'az'})")
        
        # Senaryo tablosu
        scenario_df = pd.DataFrame({
            'Metrik': ['A√ßƒ±lƒ±≈ü', 'En Y√ºksek', 'En D√º≈ü√ºk', 'Kapanƒ±≈ü'],
            'Y√ºksek Hacim': [
                f"‚Ç∫{scenarios['Y√ºksek_Hacim']['open']:.2f}",
                f"‚Ç∫{scenarios['Y√ºksek_Hacim']['high']:.2f}",
                f"‚Ç∫{scenarios['Y√ºksek_Hacim']['low']:.2f}",
                f"‚Ç∫{scenarios['Y√ºksek_Hacim']['close']:.2f}"
            ],
            'D√º≈ü√ºk Hacim': [
                f"‚Ç∫{scenarios['D√º≈ü√ºk_Hacim']['open']:.2f}",
                f"‚Ç∫{scenarios['D√º≈ü√ºk_Hacim']['high']:.2f}",
                f"‚Ç∫{scenarios['D√º≈ü√ºk_Hacim']['low']:.2f}",
                f"‚Ç∫{scenarios['D√º≈ü√ºk_Hacim']['close']:.2f}"
            ]
        })
        
        st.table(scenario_df)
        
        # Senaryo yorumlarƒ±
        scenario_analysis = f"""
        **Senaryo Analizi:**
        
        1. **Y√ºksek Hacim Senaryosu:**
           - Beklenen Hareket: {"G√º√ßl√º Y√ºkseli≈ü üìà" if pred_change > 0 else "G√º√ßl√º D√º≈ü√º≈ü üìâ"}
           - Hedef Fiyat: ‚Ç∫{scenarios['Y√ºksek_Hacim']['close']:.2f} (%{((scenarios['Y√ºksek_Hacim']['close']/df['close'].iloc[-1])-1)*100:.1f})
           - Olasƒ±lƒ±k: {"Y√ºksek ‚≠ê‚≠ê‚≠ê" if volume_status == "Y√ºksek Hacim" else "D√º≈ü√ºk ‚≠ê"}
        
        2. **D√º≈ü√ºk Hacim Senaryosu:**
           - Beklenen Hareket: {"Zayƒ±f Y√ºkseli≈ü ‚ÜóÔ∏è" if pred_change > 0 else "Zayƒ±f D√º≈ü√º≈ü ‚ÜòÔ∏è"}
           - Hedef Fiyat: ‚Ç∫{scenarios['D√º≈ü√ºk_Hacim']['close']:.2f} (%{((scenarios['D√º≈ü√ºk_Hacim']['close']/df['close'].iloc[-1])-1)*100:.1f})
           - Olasƒ±lƒ±k: {"Y√ºksek ‚≠ê‚≠ê‚≠ê" if volume_status == "D√º≈ü√ºk Hacim" else "D√º≈ü√ºk ‚≠ê"}
        
        **Pozisyon √ñnerileri:**
        1. Stop-Loss: ‚Ç∫{scenarios['D√º≈ü√ºk_Hacim']['low']:.2f} (%{((scenarios['D√º≈ü√ºk_Hacim']['low']/df['close'].iloc[-1])-1)*100:.1f})
        2. ƒ∞lk Hedef: ‚Ç∫{scenarios['Y√ºksek_Hacim']['close']:.2f} (%{((scenarios['Y√ºksek_Hacim']['close']/df['close'].iloc[-1])-1)*100:.1f})
        3. Maksimum Hedef: ‚Ç∫{scenarios['Y√ºksek_Hacim']['high']:.2f} (%{((scenarios['Y√ºksek_Hacim']['high']/df['close'].iloc[-1])-1)*100:.1f})
        
        **Risk/Getiri Oranƒ±:** {abs(((scenarios['Y√ºksek_Hacim']['close']/df['close'].iloc[-1])-1) / ((scenarios['D√º≈ü√ºk_Hacim']['low']/df['close'].iloc[-1])-1)):.1f}
        """
        
        st.markdown(scenario_analysis)
        
        # ARIMA tahmini varsa g√∂ster
        if stats_results['ARIMA Tahmini'] is not None:
            arima_change = ((stats_results['ARIMA Tahmini'] / df['close'].iloc[-1]) - 1) * 100
            st.info(f"""
            **ARIMA Modeli Tahmini:**
            - Fiyat: ‚Ç∫{stats_results['ARIMA Tahmini']:.2f}
            - Deƒüi≈üim: %{arima_change:.1f}
            - Uyum: {"‚úÖ Diƒüer tahminlerle uyumlu" if (arima_change > 0) == (pred_change > 0) else "‚ö†Ô∏è Diƒüer tahminlerle √ßeli≈üiyor"}
            """)

        # 6. ANALƒ∞Z √ñZET VE YORUMLAR
        st.header("6. ANALƒ∞Z √ñZET VE YORUMLAR")
        
        summary = generate_analysis_summary(df, predictions, risk_metrics, stats_results)
        
        # Genel Durum
        st.subheader("6.1 Genel Durum")
        
        # Ana metrikler
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Genel Trend", summary['Genel Trend'])
        with col2:
            st.metric("Risk Durumu", summary['Risk Durumu'])
        with col3:
            st.metric("MACD Sinyali", summary['MACD Sinyali'])
        with col4:
            st.metric("Bollinger", summary['Bollinger'])
            
        # Teknik G√∂stergeler
        st.subheader("6.2 Teknik G√∂stergeler")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("RSI", summary['RSI Durumu'])
        with col2:
            st.metric("Volatilite", summary['Volatilite'])
        with col3:
            st.metric("Hacim", summary['Hacim Durumu'])
        
        # Hareketli Ortalamalar
        st.subheader("6.3 Hareketli Ortalamalar")
        ma_cols = st.columns(3)
        for i, (ma_name, ma_value) in enumerate(summary['Teknik G√∂stergeler'].items()):
            with ma_cols[i]:
                st.metric(ma_name, ma_value)
        
        # Tahmin ve Risk
        st.subheader("6.4 Tahmin ve Risk Analizi")
        pred_cols = st.columns(3)
        with pred_cols[0]:
            st.metric("Yarƒ±nki Tahmin", summary['Tahmin'])
        with pred_cols[1]:
            st.metric("Sharpe Oranƒ±", summary['Sharpe'])
        with pred_cols[2]:
            var_value = f"%{abs(risk_metrics['VaR_95']*100):.1f} kayƒ±p riski"
            st.metric("VaR (%95)", var_value)

        # 7. KORELASYON ANALƒ∞Zƒ∞
        st.header("7. KORELASYON ANALƒ∞Zƒ∞")
        
        # Korelasyon matrisi
        corr_matrix = df[['open', 'high', 'low', 'close', 'Volume', 'Daily_Return', 'RSI']].corr()
        
        # Korelasyon haritasƒ±
        fig_corr = plt.figure(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)
        plt.title('Korelasyon Matrisi')
        st.pyplot(fig_corr)
        
        # Korelasyon analizi ve yorumlarƒ±
        st.subheader("7.1 Korelasyon Analizi Yorumlarƒ±")
        
        correlations = analyze_correlation_matrix(corr_matrix)
        
        for corr in correlations:
            st.write(f"**{corr['pair']}:** {corr['interpretation']} (Korelasyon: {corr['correlation']:.2f}, {corr['strength']})")
        
        st.markdown("""
        **Korelasyon Analizi √ñzeti:**
        1. **Hacim-Fiyat ƒ∞li≈ükisi:** {}
        2. **Momentum Durumu:** {}
        3. **Volatilite Etkisi:** {}
        """.format(
            "G√º√ßl√º" if abs(corr_matrix.loc['close', 'Volume']) > 0.5 else "Zayƒ±f",
            "Trend devam ediyor" if corr_matrix.loc['close', 'RSI'] > 0.7 else "Trend zayƒ±flƒ±yor",
            "Y√ºksek" if abs(corr_matrix.loc['Daily_Return', 'Volume']) > 0.3 else "D√º≈ü√ºk"
        ))

        # 8. ƒ∞STATƒ∞STƒ∞KSEL ANALƒ∞Z
        st.header("8. ƒ∞STATƒ∞STƒ∞KSEL ANALƒ∞Z")
        
        # ƒ∞statistiksel test sonu√ßlarƒ±
        st.subheader("8.1 ƒ∞statistiksel Test Sonu√ßlarƒ±")
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Duraƒüanlƒ±k Testi (ADF)", 
                     f"p-deƒüeri: {stats_results['ADF p-deƒüeri']:.4f}")
            st.metric("Normallik Testi", 
                     f"p-deƒüeri: {stats_results['Normallik p-deƒüeri']:.4f}")
        
        with col2:
            st.metric("Otokorelasyon", 
                     f"{stats_results['Otokorelasyon']:.4f}")
            st.metric("√áarpƒ±klƒ±k", 
                     f"{stats_results['√áarpƒ±klƒ±k']:.4f}")
        
        # ƒ∞statistiksel analiz yorumlarƒ±
        st.subheader("8.2 ƒ∞statistiksel Analiz Yorumlarƒ±")
        
        # Duraƒüanlƒ±k yorumu
        if stats_results['ADF p-deƒüeri'] < 0.05:
            st.success("‚úì Fiyat serisi duraƒüan: Belirli bir ortalama etrafƒ±nda dalgalanma eƒüiliminde")
        else:
            st.warning("‚ö† Fiyat serisi duraƒüan deƒüil: Belirgin bir trend mevcut")
            
        # Normallik yorumu
        if stats_results['Normallik p-deƒüeri'] < 0.05:
            st.warning("‚ö† Getiriler normal daƒüƒ±lƒ±ma uymuyor: Ekstrem hareketler normalden fazla")
        else:
            st.success("‚úÖ Getiriler normal daƒüƒ±lƒ±ma uyuyor: Fiyat hareketleri √∂ng√∂r√ºlebilir aralƒ±kta")
            
        # Otokorelasyon yorumu
        if abs(stats_results['Otokorelasyon']) > 0.2:
            st.info(f"‚Ñπ G√º√ßl√º otokorelasyon ({stats_results['Otokorelasyon']:.2f}): Fiyat hareketleri birbirini takip ediyor")
        else:
            st.info("‚Ñπ Zayƒ±f otokorelasyon: Fiyat hareketleri baƒüƒ±msƒ±z")
            
        # √áarpƒ±klƒ±k yorumu
        if abs(stats_results['√áarpƒ±klƒ±k']) > 1:
            st.warning(f"‚ö† Y√ºksek √ßarpƒ±klƒ±k ({stats_results['√áarpƒ±klƒ±k']:.2f}): Asimetrik fiyat hareketleri")
        else:
            st.success("‚úÖ D√º≈ü√ºk √ßarpƒ±klƒ±k: Simetrik fiyat hareketleri")
        
        # √ñr√ºnt√º analizi
        st.subheader("8.3 Zamansallƒ±k ve √ñr√ºnt√º Analizi")
        patterns = analyze_statistical_patterns(df)
        
        if patterns['Mevsimsellik']:
            st.info("‚Ñπ Mevsimsel √∂r√ºnt√º tespit edildi: Periyodik fiyat hareketleri mevcut")
        if patterns['Otokorelasyon']:
            st.info("‚Ñπ Fiyat hareketlerinde s√ºreklilik tespit edildi")
        if patterns['Trend G√ºc√º'] > 1:
            st.warning(f"‚ö† G√º√ßl√º trend (z-skor: {patterns['Trend G√ºc√º']:.2f})")
        if patterns['D√∂ng√ºsel Hareket'] > 0.2:
            st.info("‚Ñπ D√∂ng√ºsel hareket tespit edildi")
            
        st.markdown("""
        **√ñzet Deƒüerlendirme:**
        1. **Trend Analizi:** {}
        2. **Volatilite:** {}
        3. **√ñr√ºnt√º:** {}
        4. **√ñng√∂r√ºlebilirlik:** {}
        """.format(
            "G√º√ßl√º trend mevcut" if patterns['Trend G√ºc√º'] > 1 else "Zayƒ±f trend",
            "Y√ºksek" if risk_metrics['Volatilite'] > 0.3 or risk_metrics['VaR_99'] > 0.2 else "Orta" if risk_metrics['Volatilite'] > 0.15 else "D√º≈ü√ºk",
            "Belirgin √∂r√ºnt√ºler mevcut" if patterns['Mevsimsellik'] or patterns['Otokorelasyon'] else "Belirgin √∂r√ºnt√º yok",
            "Y√ºksek" if patterns['Otokorelasyon'] and stats_results['Normallik p-deƒüeri'] > 0.05 else "D√º≈ü√ºk"
        ))

        # 9. Rƒ∞SK ANALƒ∞Zƒ∞
        st.header("9. Rƒ∞SK ANALƒ∞Zƒ∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Volatilite", f"%{risk_metrics['Volatilite']*100:.2f}")
            st.metric("Sharpe Oranƒ±", f"{risk_metrics['Sharpe Oranƒ±']:.2f}")
            
        with col2:
            st.metric("Value at Risk (%95)", f"‚Ç∫{risk_metrics['VaR_95']:.2f}")
            st.metric("Maksimum Kayƒ±p", f"%{risk_metrics['VaR_99']*100:.2f}")
        
        # Risk analizi yorumlarƒ±
        st.subheader("9.1 Risk Analizi Yorumlarƒ±")
        
        # Volatilite yorumu
        if risk_metrics['Volatilite'] > 0.3:
            st.warning("‚ö† Y√ºksek volatilite: Riskli yatƒ±rƒ±m ortamƒ±")
        elif risk_metrics['Volatilite'] > 0.15:
            st.info("‚ÑπÔ∏è Normal volatilite: Orta risk seviyesi")
        else:
            st.success("‚úÖ D√º≈ü√ºk volatilite: D√º≈ü√ºk risk seviyesi")
            
        # Sharpe oranƒ± yorumu
        if risk_metrics['Sharpe Oranƒ±'] > 1:
            st.success("‚úÖ Y√ºksek Sharpe oranƒ±: Risk/getiri dengesi iyi")
        elif risk_metrics['Sharpe Oranƒ±'] > 0:
            st.info("‚ÑπÔ∏è Orta Sharpe oranƒ±: Risk/getiri dengesi normal")
        else:
            st.warning("‚ö†Ô∏è D√º≈ü√ºk Sharpe oranƒ±: Risk/getiri dengesi zayƒ±f")
            
        # VaR yorumu
        var_pct = risk_metrics['VaR_95'] / df['close'].iloc[-1] * 100
        st.info(f"‚ÑπÔ∏è %95 g√ºven aralƒ±ƒüƒ±nda maksimum %{var_pct:.2f} kayƒ±p beklentisi")
        
        # Maksimum kayƒ±p yorumu
        if risk_metrics['VaR_99'] > 0.2:
            st.warning("‚ö†Ô∏è Y√ºksek maksimum kayƒ±p: Dikkatli pozisyon alƒ±nmalƒ±")
        else:
            st.success("‚úÖ Kabul edilebilir maksimum kayƒ±p seviyesi")
            
        st.markdown("""
        **Risk Analizi √ñzeti:**
        1. **Genel Risk Seviyesi:** {}
        2. **Yatƒ±rƒ±m Potansiyeli:** {}
        3. **Pozisyon √ñnerisi:** {}
        4. **Risk Y√∂netimi:** Stop-loss seviyesi ‚Ç∫{} olarak belirlenebilir
        """.format(
            "Y√ºksek" if risk_metrics['Volatilite'] > 0.3 or risk_metrics['VaR_99'] > 0.2 else "Orta" if risk_metrics['Volatilite'] > 0.15 else "D√º≈ü√ºk",
            "ƒ∞yi" if risk_metrics['Sharpe Oranƒ±'] > 1 else "Orta" if risk_metrics['Sharpe Oranƒ±'] > 0 else "Zayƒ±f",
            "K√º√ß√ºk pozisyon" if risk_metrics['Volatilite'] > 0.3 else "Normal pozisyon",
            f"{df['close'].iloc[-1] * (1 - risk_metrics['VaR_95']):.2f}"
        ))

        # 10. PDF RAPORU
        st.header("10. PDF Raporu")
        
        try:
            # PDF olu≈ütur
            pdf_buffer = create_pdf_report(hisse_adi, df, summary, risk_metrics, stats_results, predictions)
            
            if pdf_buffer:
                # PDF'i indir butonu
                st.download_button(
                    label="üì• PDF Raporu ƒ∞ndir",
                    data=pdf_buffer,
                    file_name=f"{hisse_adi}_analiz_raporu_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                    mime="application/pdf",
                    key="download_pdf",
                    help="Analiz raporunu PDF formatƒ±nda indirmek i√ßin tƒ±klayƒ±n"
                )
                st.success("‚úÖ PDF raporu ba≈üarƒ±yla olu≈üturuldu! ƒ∞ndirmek i√ßin yukarƒ±daki butona tƒ±klayƒ±n.")
            else:
                st.error("‚ùå PDF raporu olu≈üturulamadƒ±. L√ºtfen tekrar deneyin.")
                
        except Exception as e:
            st.error(f"PDF olu≈üturulurken bir hata olu≈ütu: {str(e)}")
            st.info("L√ºtfen tekrar deneyin veya destek ekibiyle ileti≈üime ge√ßin.")

def create_pdf_report(hisse_adi, df, summary, risk_metrics, stats_results, predictions):
    """PDF raporu olu≈üturur"""
    # PDF buffer olu≈ütur
    buffer = io.BytesIO()
    
    try:
        # PDF dok√ºmanƒ± olu≈ütur
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        # Ba≈ülƒ±k
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30
        )
        story.append(Paragraph(f"{hisse_adi} Hisse Analiz Raporu", title_style))
        story.append(Spacer(1, 12))
        
        # Tarih
        date_style = ParagraphStyle(
            'DateStyle',
            parent=styles['Normal'],
            fontSize=12,
            textColor=colors.gray
        )
        story.append(Paragraph(f"Rapor Tarihi: {datetime.now().strftime('%d.%m.%Y %H:%M')}", date_style))
        story.append(Spacer(1, 20))
        
        # Genel Durum
        story.append(Paragraph("1. Genel Durum", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        general_data = [
            ["Metrik", "Deƒüer"],
            ["Son Fiyat", f"‚Ç∫{df['close'].iloc[-1]:.2f}"],
            ["Trend", summary['trend']],
            ["Risk Durumu", summary['risk_durumu']],
            ["MACD Sinyali", summary['macd_signal']],
            ["Bollinger", summary['bollinger_signal']]
        ]
        
        t = Table(general_data, colWidths=[200, 300])
        t.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(t)
        story.append(Spacer(1, 20))
        
        # Risk Analizi
        story.append(Paragraph("2. Risk Analizi", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        risk_data = [
            ["Metrik", "Deƒüer"],
            ["Sharpe Oranƒ±", f"{risk_metrics['Sharpe Oranƒ±']:.2f}"],
            ["VaR (%95)", f"%{abs(risk_metrics['VaR_95']*100):.1f}"],
            ["Volatilite", f"%{risk_metrics['Volatilite']*100:.1f}"],
            ["Maximum Drawdown", f"%{risk_metrics['Max Drawdown']*100:.1f}"]
        ]
        
        t = Table(risk_data, colWidths=[200, 300])
        t.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(t)
        story.append(Spacer(1, 20))
        
        # ƒ∞statistiksel Analiz
        story.append(Paragraph("3. ƒ∞statistiksel Analiz", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        stats_data = [
            ["Metrik", "Deƒüer"],
            ["Ortalama Getiri", f"%{stats_results['Ortalama Getiri']*100:.2f}"],
            ["Standart Sapma", f"%{stats_results['Standart Sapma']*100:.2f}"],
            ["√áarpƒ±klƒ±k", f"{stats_results['√áarpƒ±klƒ±k']:.2f}"],
            ["Basƒ±klƒ±k", f"{stats_results['Basƒ±klƒ±k']:.2f}"]
        ]
        
        t = Table(stats_data, colWidths=[200, 300])
        t.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(t)
        
        # PDF olu≈ütur
        doc.build(story)
        buffer.seek(0)
        return buffer
        
    except Exception as e:
        st.error(f"PDF olu≈üturulurken bir hata olu≈ütu: {str(e)}")
        return None

# Ana uygulama
if uploaded_file is not None:
    # Dosya adƒ±nƒ± kontrol et
    if not uploaded_file.name.startswith(hisse_adi):
        st.error(f"L√ºtfen {hisse_adi} ile ba≈ülayan bir CSV dosyasƒ± y√ºkleyin!")
    else:
        # CSV dosyasƒ±nƒ± oku ve analizleri yap
        df = pd.read_csv(uploaded_file)
        # ... diƒüer analizler ...
else:
    st.info(f"L√ºtfen √∂nce hisse adƒ±nƒ± girin ve ardƒ±ndan {hisse_adi if hisse_adi else 'hisse adƒ±'} ile ba≈ülayan CSV dosyasƒ±nƒ± y√ºkleyin.")
